var relearn_searchindex = [
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "Let‚Äôs get into our first bit of Python. Who‚Äôs played with a spirograph before - drawing circles or lines over and over again to make pretty geometric patterns?\nWe‚Äôre going to learn how to Python by building our own simple script to make a shape.\nStart by heading over to Python Sandbox.\nLet‚Äôs start off by running the script that is already in there. It should look like this:\nimport turtle t = turtle.Turtle() t.speed(5) # 1:slowest, 3:slow, 5:normal, 10:fast, 0:fastest t.forward(100) Let‚Äôs step through what‚Äôs happening:\nAt the top of our code we are importing the turtle library - this is telling your code to go get some extra stuff it needs to perform this task. Think of it like a library book, you wouldn‚Äôt walk around school carrying every single book with you, its ineffecient and you‚Äôd get tired from carrying them. Instead, when you need the book for a subject you go and grab it. Today we need a book about turtles.\nOn line two, you‚Äôre creating a new turtle named t. Think of it like putting a turtle onto the screen that you can now give commands to (like move forward, turn, draw, etc). You could call this anything - maybe your turtle is named Elizabeth, or Myrtle. Everywhere else in your code that we talk about the turtle we need to include this name so we know who we‚Äôre talking about.\nNext we are defining the speed the turtle is going at. The text after the # is a little comment just for our eyes, the computer ignores it. Use this to talk to your friends or your future self to describe what you‚Äôre doing or the expected behaviour.\nSimilarly on line 4 we are telling our turtle t to move forward with the value of 100. Play around with making this more, or less, and see what happens.\nLet‚Äôs add some more code:\nfor i in range(20): steps = int(200) angle = int(100) t.right(angle) t.fd(steps) Press run, let‚Äôs see what happens.\nPretty right? You just wrote your first for loop - YAY TEAM.\nLet‚Äôs break that down:\nTo kick it off we are starting a loop that runs 20 times. Each time the loop runs, the variable i increases from 0 to 19. Python uses indenting (spacing) to know what, specifically we want to loop through. In this case, the indented lines below it will happen once per loop, so the turtle will do the same set of actions 20 times.\nA loop is SO POWERFUL because instead of writing out an instruction 20 times (so tedious) we can just say do this - loop through 20 times. Sorted.\nNext we need to know what we are asking of our turtle friend.\nsteps = int(200) This sets the number of steps the turtle will move forward. We‚Äôre storing the value 200 in a variable called steps. Using int() here is technically unnecessary since 200 is already an integer ‚Äî but its a good practice to be in.\nCan you guess what the next line is doing? We are creating a new variable called angle and storing the value 100 in it, just like the line above.\nBut with just those two lines nothing actually happens.\nWe need to call the function which is what‚Äôs happening in our final two lines. We are saying t (our turtle) we want you to turn right the amount of degrees of our variable angle, and then we want to move forward the number in our variable steps.\nNow let‚Äôs play with color - add the following line:\nt.color(\"pink\") Did it turn pink? Try moving the line to different points in your code running it again and seeing what happens.",
    "description": "Let‚Äôs get into our first bit of Python. Who‚Äôs played with a spirograph before - drawing circles or lines over and over again to make pretty geometric patterns?\nWe‚Äôre going to learn how to Python by building our own simple script to make a shape.\nStart by heading over to Python Sandbox.\nLet‚Äôs start off by running the script that is already in there. It should look like this:",
    "tags": [],
    "title": "1. Our first Python Turtle",
    "uri": "/python/python/01_turtles/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)",
    "content": "Meet Python: Your New Coding Sidekick üêç\nWe think Python is as friendly as your favourite teacher, as flexible as a yoga instructor, and as powerful as a wizard.\nWhat Makes Python So Sweet?\nSuper Easy to Read Python speaks almost plain English. No weird symbols, or confusing squiggles. Human readability is what makes this language a nice starting place. But don‚Äôt worry if it looks confusing to start - any language takes some practice.\nOne Language, Endless Adventures Want to build a website? Done. Analyse data like a science genius? Absolutely. Train a robot to tell dad jokes? You got it. Python‚Äôs ready.\nWorks on (Almost) Everything Mac, Windows, Linux, a Raspberry Pi in a robot that runs your garden sprinklers ‚Äî Python‚Äôs cool with all of them.\nMagic in the Toolbox Python comes packed with libraries. Need to chart your mood swings? matplotlib. Want to scrape memes off the web? BeautifulSoup. Dreaming of AI that writes haikus? transformers. There‚Äôs a library for that.\nWhat Do People Use It For?\nAutomating boring stuff (emails, reports, coffee orders‚Ä¶ okay, maybe not that last one*) Building websites \u0026 apps (with Django or Flask ‚Äî great names, right? Bet you didn‚Äôt know Instagram is built using one of these!) Data science and visualisation (so many graphs, so little time) Machine learning and AI (yes, Python is so relevant in an AI world) Teaching beginners how to code (honestly, it‚Äôs a great place to start) This tutorial was made with \u003c3 by Kate Kirwin for St Patricks College Townsville",
    "description": "Meet Python: Your New Coding Sidekick üêç\nWe think Python is as friendly as your favourite teacher, as flexible as a yoga instructor, and as powerful as a wizard.\nWhat Makes Python So Sweet?\nSuper Easy to Read Python speaks almost plain English. No weird symbols, or confusing squiggles. Human readability is what makes this language a nice starting place. But don‚Äôt worry if it looks confusing to start - any language takes some practice.",
    "tags": [],
    "title": "Python 101",
    "uri": "/python/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "Hello World, this is me. Hello World is the most common starting point for any developer, dating all the way back to 1978!\nToday we are going to do it in a couple of different ways.\nFirstly, let‚Äôs swap to text mode on Python Sandbox by selecting the Mode menu up the top, and toggling to text mode\nLet‚Äôs replace the current text with and press run.\nprint 'Hello World!' The print() function tells Python to display something on the screen ‚Äî usually in the terminal or console.\nThink of it like telling Python: üó£Ô∏è ‚ÄúHey, show this message to the user!‚Äù\nIt‚Äôs really handy for debugging to check if something is (or isn‚Äôt!) getting called.\nIt can print text\nprint(\"I love turtles!\") It can print numbers\nprint(42) It can print the result of a calculation\nprint(5 + 3) ‚û°Ô∏è This will display: 8\nIt can print variables\nname = \"Kate\" print(name) ‚û°Ô∏è This will show: Kate\nAnd it can combine text and variables\nname = \"Kate\" print(\"Hello, \" + name + \"!\") Let‚Äôs jump back over to Turtle Mode and see if we can write Hello World another way!\nCopy in the below, run it, and then let‚Äôs talk through what‚Äôs happening.\nNote Hint: the comments after the # are really helpful in describing what‚Äôs happening\nimport turtle # Set up the screen screen = turtle.Screen() screen.bgcolor(\"lightblue\") # Create a turtle t = turtle.Turtle() t.color(\"darkblue\") t.hideturtle() # Hide the turtle icon t.penup() # Lift the pen so it doesn't draw lines # Move to a good writing spot t.goto(0, 200) # You can change this to move text higher/lower # Write the message t.write(\"Hello, World!\", align=\"center\", font=(\"Arial\", 24, \"bold\")) Just like before we are importing our trusty turtle library, setting the scene (or screen) and making it a lovely shade of blue, and creating our turtle called t again, and making her dark blue.\nUnlike last time, we are hiding her from view (GASP), and we don‚Äôt want her to draw lines all over our page making it hard to read. Try switching to pendown and see what happens.\nNext we are using the inbuilt function goto to move our invisible turtle to a spot on our page, and finally we are asking her to write us a message, using a bit of styling to make sure it looks the way we want.",
    "description": "Hello World, this is me. Hello World is the most common starting point for any developer, dating all the way back to 1978!\nToday we are going to do it in a couple of different ways.\nFirstly, let‚Äôs swap to text mode on Python Sandbox by selecting the Mode menu up the top, and toggling to text mode\nLet‚Äôs replace the current text with and press run.",
    "tags": [],
    "title": "2. Hello World",
    "uri": "/python/python/02_hello_world/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101¬†\u003e¬† 3. Getting Python on Your Machine",
    "content": "VS Code VS Code is a very popular and free to use editor. It‚Äôs available for Windows, OS X and Linux. Note, if you are using a Chromebook then it will present you with a few options to download from, choose the option that has the .deb or debian and that should work for you.\nDownload it here\nWhy are we installing a code editor? You might be wondering why we are installing this special code editor software, rather than using something like Word or Notepad.\nThe first reason is that code needs to be plain text, and the problem with programs like Word and Textedit is that they don‚Äôt actually produce plain text, they produce rich text (with fonts and formatting), using custom formats like RTF (Rich Text Format).\nThe second reason is that code editors are specialized for editing code, so they can provide helpful features like highlighting code with colour according to its meaning, or automatically closing quotes for you.",
    "description": "VS Code VS Code is a very popular and free to use editor. It‚Äôs available for Windows, OS X and Linux. Note, if you are using a Chromebook then it will present you with a few options to download from, choose the option that has the .deb or debian and that should work for you.\nDownload it here\nWhy are we installing a code editor? You might be wondering why we are installing this special code editor software, rather than using something like Word or Notepad.",
    "tags": [],
    "title": "Code Editor",
    "uri": "/python/python/03_getting_python_on_your_machine/2_code_editor/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "For this tutorial we are going to need python installed, and a code editor - in this case we are using VS Code.",
    "description": "For this tutorial we are going to need python installed, and a code editor - in this case we are using VS Code.",
    "tags": [],
    "title": "3. Getting Python on Your Machine",
    "uri": "/python/python/03_getting_python_on_your_machine/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "Are you ready to build a game? As a reminder we are building something that looks a bit like this:\nTo take some of the heavy lifting off, we‚Äôve prepared some starter code for you that covers things like styling and basic setup so you can focus on the fun stuff - writing the code that pulls it all together.\nLet‚Äôs start off by opening VS Code. Next we want to go to Select File ‚Äì\u003e New File, and you should see your program window. It‚Äôs always a great idea to save your project at the beginning of any new development, so let‚Äôs do that now by hitting select File ‚Äì\u003e Save and name the file (I called mine game.py)\nVS Code may ask if you want to install a Python extension, feel free to follow the prompts and do so.\nOnce you‚Äôve got that in there, drop in this code.\nimport turtle import random # --- SETUP --- screen = turtle.Screen() screen.bgcolor(\"lightblue\") screen.bgpic(\"image.gif\") # Background image screen.title(\"Turtle Rescue Mission\") screen.setup(width=600, height=600) # --- SCORE + HEALTH --- score = 0 health = 3 score_writer = turtle.Turtle() score_writer.hideturtle() score_writer.color(\"white\") score_writer.penup() score_writer.goto(-250, 260) health_writer = turtle.Turtle() health_writer.hideturtle() health_writer.color(\"lightpink\") health_writer.penup() health_writer.goto(150, 260) # --- PLAYER TURTLE --- rescueturtle = turtle.Turtle() rescueturtle.shape(\"turtle\") rescueturtle.color(\"pink\") rescueturtle.penup() rescueturtle.setheading(90) rescueturtle.goto(0, -250) # --- OCEAN OBJECTS --- screen.addshape(\"coral.gif\") screen.addshape(\"bag.gif\") screen.addshape(\"can.gif\") screen.addshape(\"bottle.gif\") # --- OCEAN FACTS / MESSAGES --- ocean_facts = [ \"Did you know? A plastic bottle can take 450 years to decompose.\", \"Did you know? Sea turtles often mistake plastic bags for jellyfish!\", \"Did you know? Coral reefs support over 25% of all marine life.\", \"Did you know? Only 9% of plastic ever produced has been recycled.\", \"Did you know? Every minute, one garbage truck of plastic enters our oceans.\", ] # --- FACT AT THE BOTTOM --- fact_writer = turtle.Turtle() fact_writer.hideturtle() fact_writer.penup() fact_writer.goto(0, -280) fact_writer.color(\"white\") fact_writer.write(random.choice(ocean_facts), align=\"center\", font=(\"Arial\", 12, \"italic\")) # --- START GAME --- turtle.done() We also want to download the following images so that they load when they‚Äôre ready to be called. For Python to run it they need to be saved the right size and in a .gif format, so its best if you use these ones for now, but definitely play around later on to see what magic you can create.\nCoral Bag Bottle Can Background Image Once you‚Äôve downloaded them all, drag them into your workspace on VS code so you know they‚Äôre in the same place as your turtle.\nLet‚Äôs run it and see what happens. We can run it by pressing this button\nAdding some movement in Let‚Äôs move that little turtle! Underneath your section about Ocean Facts drop in this segment of code\n# --- MOVEMENT FUNCTIONS --- def move_left(): x = rescueturtle.xcor() - 40 if x \u003c -280: x = -280 rescueturtle.setx(x) def move_right(): x = rescueturtle.xcor() + 40 if x \u003e 280: x = 280 rescueturtle.setx(x) # --- KEYBOARD BINDINGS --- screen.listen() screen.onkey(move_left, \"Left\") screen.onkey(move_right, \"Right\") So, what‚Äôs happening here? We‚Äôre starting off by making our first function. A function is a sequence of instructions that Python should execute. Each function in Python starts with the keyword def, is given a name, and can have some parameters. In this case we are making a function to move left and a function to move right.\nLet‚Äôs go line by line\nx = rescueturtle.xcor() - 40 In this piece of code rescueturtle.xcor() gets the current x-coordinate of the turtle (remember your x and y axis from Math class?). We subtract 40 to move it 40 pixels to the left. This number is somewhat arbitary - you could increase or decrease it, but it may feel jumpy or glitchy. The new position is stored in the variable x.\nif x \u003c -280: x = -280 This is a boundary check. If moving left would push the turtle off the screen, we reset x to -280, which is the left edge of the screen. This keeps our turtle visible and playable. If statements are really powerful - if this is true, do this thing. Later on we will see some if/else statements to unlock even more python power.\nFinally we finish this block off by setting rescueturtle.xcor() to x to establish its new position on our game board.\nWe‚Äôre repeating that with our move_right function so we can move in both directions, and then we make sure the code knows how to actually interpret what we are pressing.\nscreen.listen() is telling our computer ‚ÄòHey wake up, it‚Äôs important to notice when I‚Äôm pressing things!\". Without this line, your code will completely ignore any buttons you may be pressing.\nscreen.onkey(move_left, \"Left\") This line is saying ‚ÄòWhen the Left Arrow key is pressed, run the move_left() function‚Äô. You could change this from ‚Äúleft‚Äù to ‚Äúa‚Äù and see what happens. Similarly, we are repeating the logic for our `move_right‚Äô function.\nStep 1 done, we‚Äôve got a turtle who moves!!!",
    "description": "Are you ready to build a game? As a reminder we are building something that looks a bit like this:\nTo take some of the heavy lifting off, we‚Äôve prepared some starter code for you that covers things like styling and basic setup so you can focus on the fun stuff - writing the code that pulls it all together.",
    "tags": [],
    "title": "4. Incoming Rescue Turtle!",
    "uri": "/python/python/04_incoming_rescue_turtle/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "Next we‚Äôre going to add some objects to move in our ocean. By the end of this tutorial we will have a few different pieces of rubbish for our turtle rescuer to go and collect - cans, bottles, and plastic bags - as well as some coral reefs that we really don‚Äôt want our rescue turtle to run into and destroy.\nTo get started though we are just going to get one object ‚Äòfalling‚Äô through our ocean.\n# --- CREATE FALLING OBJECT --- falling = turtle.Turtle() falling.shape(\"can.gif\") falling.penup() falling.goto(0, 300) # --- SIMPLE FALL LOOP --- def fall(): y = falling.ycor() - 10 falling.sety(y) if y \u003e -300: screen.ontimer(fall, 100) fall() What we are are doing is first making our shape to fall - we‚Äôre telling it to use the image can.gif as the shape, and setting it to start at the top of our screen.\nThen we are defining another function using the y coordinates (remember how we editted the x axis earlier?) and telling it to go down 10 pixels at a time. We include a loop so it keeps falling until its at -300 which is the bottom of our page. Finally the last line is calling the function - hey computer - do the thing we called fall().\nNice one!\nNow let‚Äôs fish that trash out of the ocean when it collides with our rescue turtle.\nReplace your fall function with the below (making sure you still leave in the section for creating the falling object, and the line at the end calling the function - fall())\ndef fall(): y = falling.ycor() - 10 falling.sety(y) if falling.distance(rescueturtle) \u003c 40 and falling.ycor() \u003c -230: falling.hideturtle() elif y \u003e -300: screen.ontimer(fall, 100) So what‚Äôs happening here? You‚Äôll notice the function starts the same, but we‚Äôve now got an if and elif statement. Let‚Äôs break those down.\nif falling.distance(rescueturtle) \u003c 40 and falling.ycor() \u003c -230: falling.hideturtle() This section is checking if the distance between our rescue turtle and our falling objects is less than 40 pixels AND if the falling object is lower than -230 pixels on the screen. The first part is to check if we collided with something (we can assume in this case if we are within 40 pixels its a collision), but we‚Äôre also double checking our work by adding the second element - making sure the object is low enough down the screen where our turtle is based. This helps us weed out any unexpected behaviour.\nelif stands for else if, in other words we are saying do the first thing and if you can‚Äôt, do this second thing instead. In this elif we are just telling the falling object to continue falling if its not collided with.\nNice work - we‚Äôve got some trash appearing, and a mechanism to collide with it and make it disappear from the ocean when we do so. Let‚Äôs make it a bit harder shall we?",
    "description": "Next we‚Äôre going to add some objects to move in our ocean. By the end of this tutorial we will have a few different pieces of rubbish for our turtle rescuer to go and collect - cans, bottles, and plastic bags - as well as some coral reefs that we really don‚Äôt want our rescue turtle to run into and destroy.\nTo get started though we are just going to get one object ‚Äòfalling‚Äô through our ocean.",
    "tags": [],
    "title": "5. Let's Clean Some Oceans",
    "uri": "/python/python/05_lets_clean_some_oceans/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "So now we have some objects in our ocean - but we want to keep track of them using a scoreboard system.\nJust above our game logic, towards the end of our code we want to add\ndef update_display(): score_writer.clear() health_writer.clear() score_writer.write(f\"Score: {score}\", font=(\"Arial\", 16, \"bold\")) health_writer.write(f\"Health: {health}\", font=(\"Arial\", 16, \"bold\")) update_display() You‚Äôll notice we already had score_writer and health_writer set up in our code but we weren‚Äôt doing anything with them because our scoreboard wasn‚Äôt operational. Here we are making a function called update_display() which is going to first clear whatever was there, and then write our score in, and our health checker.\nIf we run our code now it won‚Äôt work, we also want to update our def fall() one more time to the below:\ndef fall(): global score, health y = falling.ycor() - 10 falling.sety(y) if falling.distance(rescueturtle) \u003c 40 and falling.ycor() \u003c -230: if falling.shape() == \"can.gif\": score += 1 else: health -= 1 update_display() falling.hideturtle() elif y \u003e -300: screen.ontimer(fall, 100) Can you spot the difference between the code we had before and what we have now? We‚Äôve added the global variables score, and health which we used in the code block we just wrote. We also added in score += 1 and health -= 1 to make our scoreboard reflect the action that‚Äôs taking place on the screen, and we‚Äôve added in our newly built function update_display() to be called each time the falling shape collides with our turtle.\nWe‚Äôre so close gals! Let‚Äôs keep swimming.",
    "description": "So now we have some objects in our ocean - but we want to keep track of them using a scoreboard system.\nJust above our game logic, towards the end of our code we want to add\ndef update_display(): score_writer.clear() health_writer.clear() score_writer.write(f\"Score: {score}\", font=(\"Arial\", 16, \"bold\")) health_writer.write(f\"Health: {health}\", font=(\"Arial\", 16, \"bold\")) update_display() You‚Äôll notice we already had score_writer and health_writer set up in our code but we weren‚Äôt doing anything with them because our scoreboard wasn‚Äôt operational. Here we are making a function called update_display() which is going to first clear whatever was there, and then write our score in, and our health checker.",
    "tags": [],
    "title": "6. Keeping Count",
    "uri": "/python/python/06_keeping_count/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "Django Admin To add, edit and delete the posts we‚Äôve just modeled, we will use Django admin.\nLet‚Äôs open the bakeries/admin.py file in the code editor and replace its contents with this:\nfrom django.contrib import admin from .models import Bakery, Item admin.site.register(Bakery) admin.site.register(Item) As you can see, we import (include) the Bakery and Item models defined in the previous chapter. To make our models visible on the admin page, we need to register the model with admin.site.register(Bakery) and admin.site.register(Item).\nOK, time to look at our Bakery and Item models. Remember to run python manage.py runserver in the console to run the web server. Go to your browser and type the address http://127.0.0.1:8000/admin/. You will see a login page like this:\nTo log in, you need to create a superuser - a user account that has control over everything on the site. Go back to the command line type python manage.py createsuperuser, and press enter.\nNote Remember, to write new commands while the web server is running, open a new terminal window and activate your virtualenv. We reviewed how to write new commands in the Your first Django project! chapter, in the Starting the web server section.\nmacOS or Linux:\n(myvenv) bakery_site% python manage.py createsuperuser Windows:\n(myvenv) ~/bakery_site$ python manage.py createsuperuser When prompted, type your username (lowercase, no spaces), email address, and password. Don‚Äôt worry that you can‚Äôt see the password you‚Äôre typing in ‚Äì that‚Äôs how its supposed to be, for security. Type it in and press enter to continue. The output should look like this (where the username and email should be your own ones):\nUsername: flourpower Email address: hello@flourpower.com Password: Password (again): Superuser created successfully. Return to your browser. Log in with the superuser‚Äôs credentials you chose; you should see the Django admin dashboard.\nGo to Bakery and experiment a little bit with it. Add two or three bakeries. Don‚Äôt worry too much about the content ‚Äì it‚Äôs only visible to you on your local computer. You can copy some text from the list below if you‚Äôre looking for inspiration.\nBakery Name Address Flour Power 12 Gardenia St, Subiaco WA 6008 Dough Re Mi 98 Symphony Rd, Southbank VIC 3006 Rolling in Dough 34 Cashmere Ave, New Farm QLD 4005 Batter Late Than Never 51 Tardy Ln, Glenelg SA 5045 Whisk Takers 7 Adventure Ct, Kingston ACT 2604 The Daily Knead 101 Baker St, Hobart TAS 7000 Sugar High 22 Sherbet Cres, Fremantle WA 6160 Bready or Not 9 Puzzle Pde, Brunswick VIC 3056 Muffin But Love 66 Crumb Crt, Paddington QLD 4064 Piece of Cake 80 Easy St, Northbridge WA 6003 Bake It Happen 11 Rise Rd, Newtown NSW 2042 You Batter Believe It 42 Sprinkle Way, Norwood SA 5067 Oh, Crumbs! 5 Biscuit Blvd, Launceston TAS 7250 Pain in the Bun 13 Croissant Pl, Manly NSW 2095 Bon App√©Treat 77 Parisian Ln, Carlton VIC 3053 The Baguette About It 28 Forget It St, Darwin NT 0800 Now head to Item and add some items for each bakery!\nItem Name Description Sourdough Loaf Crusty, tangy artisan bread Croissant Buttery, flaky French pastry Chocolate √âclair Choux pastry filled with cream and topped with chocolate Lamington Sponge cake coated in chocolate and coconut Vanilla Slice Layers of custard and puff pastry, topped with icing Apple Turnover Pastry filled with stewed apples Sausage Roll Puff pastry wrapped around seasoned meat Cinnamon Scroll Swirled bun with cinnamon and icing Cupcake Individual sponge cake with frosting If you want to know more about Django admin, check out Django‚Äôs documentation\nThis is probably a good moment to grab a tea or coffee to re-energize yourself. You created your first Django model ‚Äì you deserve a little break!",
    "description": "Django Admin To add, edit and delete the posts we‚Äôve just modeled, we will use Django admin.\nLet‚Äôs open the bakeries/admin.py file in the code editor and replace its contents with this:\nfrom django.contrib import admin from .models import Bakery, Item admin.site.register(Bakery) admin.site.register(Item) As you can see, we import (include) the Bakery and Item models defined in the previous chapter. To make our models visible on the admin page, we need to register the model with admin.site.register(Bakery) and admin.site.register(Item).",
    "tags": [],
    "title": "7. Django Admin",
    "uri": "/python/python/07_django_admin/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101",
    "content": "This is so exciting, we‚Äôve got data from our Django admin but we need to display it on our page. Let‚Äôs go back to our views.py one more time and update it to look like the below:\nfrom django.shortcuts import render from .models import Bakery def index(request): context = { \"bakeries\": Bakery.objects.all() } return render(request, \"index.html\", context) This is telling our views to go look at our models, pull all the objects we created (remember the objects we talked about in the She‚Äôs a Model section?) and show us that content, dynamically. Pretty snazzy.\nAdding Django Data ‚Äì Make It Dynamic! Right now, the data on your page is hardcoded. But Django is all about dynamic content meaning you can pull real data from your database and render it with your template.\nSo let‚Äôs replace our sample bakeries with a smart Django loop that pulls real bakery info from your models. At the very top of your template file, add this line:{% load static %}. This tells Django to prepare for using static files ‚Äî like CSS stylesheets, images, or JavaScript.\nNotice in the snippet below we are removing the section in main from \u003carticle\u003e down to \u003c/article\u003e and replacing it with code that starts with {% for bakery in bakeries %} and ends with {% endfor %}. Watch carefully for the + and - lines in this one - it‚Äôs easy to get caught out.\n+ {% load static %} \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eBakery Finder\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cheader\u003e \u003ch1\u003eüßÅ Bakery Finder\u003c/h1\u003e \u003c/header\u003e \u003cmain\u003e \u003cp\u003eNeed to find a bakery in a hurry? Here's a list of bakeries in your local area:\u003c/p\u003e - \u003carticle\u003e - \u003ch2\u003eSweet Treats\u003c/h2\u003e - \u003cp class=\"description\"\u003eSpecializing in cupcakes and macarons üç∞\u003c/p\u003e - \u003cp\u003eLocated at: 123 Tasty Street\u003c/p\u003e - \u003cp\u003eRating ‚≠ê: 4.8\u003c/p\u003e - \u003cul\u003e - \u003cli\u003eChocolate Cupcake - $3.50\u003c/li\u003e - \u003cli\u003eVanilla Macaron - $2.00\u003c/li\u003e - \u003c/ul\u003e - \u003c/article\u003e - \u003carticle\u003e - \u003ch2\u003eBakehouse Delight\u003c/h2\u003e - \u003cp class=\"description\"\u003eFresh croissants and artisan bread ü•ê\u003c/p\u003e - \u003cp\u003eLocated at: 456 Crusty Avenue\u003c/p\u003e - \u003cp\u003eRating ‚≠ê: 4.6\u003c/p\u003e - \u003cul\u003e - \u003cli\u003eButter Croissant - $4.00\u003c/li\u003e - \u003cli\u003eSourdough Loaf - $6.50\u003c/li\u003e - \u003c/ul\u003e - \u003c/article\u003e + {% for bakery in bakeries %} + \u003carticle\u003e + \u003ch2\u003e{{ bakery.name }}\u003c/h2\u003e + \u003cp class=\"description\"\u003e{{ bakery.cuisine }}\u003c/p\u003e + \u003cp\u003eLocated at: {{ bakery.address|linebreaksbr }}\u003c/p\u003e + \u003cp\u003eRating ‚≠ê: {{ bakery.rating }}\u003c/p\u003e + \u003cul\u003e + {% for item in bakery.item_set.all %} + \u003cli\u003e{{ item.name }} - ${{ item.price }}\u003c/li\u003e + {% endfor %} + \u003c/ul\u003e + \u003c/article\u003e + {% empty %} + \u003cp\u003eNo bakeries found. Add some via the admin panel!\u003c/p\u003e + {% endfor %} \u003c/main\u003e \u003cfooter\u003e \u003cp\u003e¬© 2025 Bakery Finder\u003c/p\u003e \u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e What‚Äôs Going On Here? Let‚Äôs break down the Django template tags and expressions used in your dynamic page.\n{% for bakery in bakeries %}\n‚Üí This starts a loop that runs once for every bakery in your database. Django will automatically pass the list of bakeries from your view function to this template.\n{{ bakery.name }}\n‚Üí This grabs the name of each bakery and displays it in an \u003ch2\u003e heading.\n{{ bakery.cuisine }}\n‚Üí Maybe they do cupcakes, croissants, sourdough ‚Äî we‚Äôre showing off their specialty.\n{{ bakery.address|linebreaksbr }}\n‚Üí The address might have line breaks, and |linebreaksbr helps format it nicely with \u003cbr\u003e tags.\n{{ bakery.rating }}\n‚Üí Yep, we‚Äôre even showing the star rating!\n{% for item in bakery.item_set.all %}\n‚Üí This is a nested loop that lists each item (like cupcakes, bread, or macarons) that belongs to the current bakery. Django knows the relationship because of your model setup (ForeignKey from Item to Bakery).\n{% empty %}\n‚Üí Super friendly UX: if your database doesn‚Äôt have any bakeries yet, Django will show a helpful message.\n{% endfor %}\n‚Üí This wraps up the loop.\nLet‚Äôs go ahead and check your server http://127.0.0.1:8000/\nWe‚Äôve got our data in dynamically now, heck yes!! Did you notice though that we added photos for our items in the Django admin but haven‚Äôt got them on our website yet. We want to be salivating looking at the delicious treats so lets add another snippet to include images.\nInside our code we should have a snippet that starts with {% for item in bakery.item_set.all %} - let‚Äôs replace it with the below snippet. See how we now have a line in here with images in it? This should load our photos.\n{% for item in bakery.item_set.all %} \u003cli\u003e\u003cspan\u003e{{ item.name }} - ${{ item.price }}\u003c/span\u003e \u003cbr /\u003e \u003cimg style=\"width:200px;\" src=\"{{ item.image }}\"\u003e\u003c/a\u003e \u003c/li\u003e {% endfor %} Now, every time you add a new bakery via the admin, it‚Äôll automatically show up here! This is where Django starts feeling like magic ‚ú®\nLet‚Äôs go ahead and check your server http://127.0.0.1:8000/\nNow let‚Äôs go to admin http://127.0.0.1:8000/admin. Login with your superuser credentials. Remember in admin section (Chapter 7) where we played around and added some bakery details? It‚Äôs time to add more and watch it come to life!\nThat‚Äôs all folks, you‚Äôve built your first Django app. We‚Äôre so proud of you!!!",
    "description": "This is so exciting, we‚Äôve got data from our Django admin but we need to display it on our page. Let‚Äôs go back to our views.py one more time and update it to look like the below:\nfrom django.shortcuts import render from .models import Bakery def index(request): context = { \"bakeries\": Bakery.objects.all() } return render(request, \"index.html\", context) This is telling our views to go look at our models, pull all the objects we created (remember the objects we talked about in the She‚Äôs a Model section?) and show us that content, dynamically. Pretty snazzy.",
    "tags": [],
    "title": "8. Make It Dynamic",
    "uri": "/python/python/08_thats_a_wrap/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)¬†\u003e¬† Python 101¬†\u003e¬† 3. Getting Python on Your Machine",
    "content": "We need Python before we can start. If you don‚Äôt have Python installed yet, start by installing Python. Ideally we would like you to install the latest version of Python, however if you already have an earlier version installed that should work too! At a minimum, this tutorial requires Python 3.5.\nCheck your version of Python We‚Äôre going to perform a simple experiment to check whether Python is already installed, and if it is, what version is installed.\nOpen the Terminal application of your choice (if you don‚Äôt know what the terminal is feel free to ask a mentor) and enter the following command, depending on your operating system:\n‚Äã MacOS Windows python3 --version py --version If the command returns Python 3.Y.Z congratulations you have Python installed! Otherwise you will have to install Python on your machine. How to do this will vary depending on your system, see below for instructions on how to do this for some common systems.\nInstallation ‚Äã MacOS Windows Before you install Python on OS X, you should ensure your Mac settings allow installing packages that aren‚Äôt from the App Store. Go to System Preferences (it‚Äôs in the Applications folder), click ‚ÄúSecurity \u0026 Privacy,‚Äù and then the ‚ÄúGeneral‚Äù tab. If your ‚ÄúAllow apps downloaded from:‚Äù is set to ‚ÄúMac App Store,‚Äù change it to ‚ÄúMac App Store and identified developers.‚Äù\nYou need to go to the website https://www.python.org/downloads/ and download the latest version of the Python installer:\nDownload the Mac OS X 64-bit/32-bit installer file, Double click python-3.x.x-macosx10.x.pkg to run the installer. First check whether your computer is running a 32-bit version or a 64-bit version of Windows, by pressing the Windows key + Pause/Break key which will open your System info, and look at the ‚ÄúSystem type‚Äù line. You can download Python for Windows from the website https://www.python.org/downloads/windows/. Click on the ‚ÄúLatest Python 3 Release - Python x.x.x‚Äù link. If your computer is running a 64-bit version of Windows, download the Windows x86-64 executable installer. Otherwise, download the Windows x86 executable installer. After downloading the installer, you should run it (double-click on it) and follow the instructions there.\nOne thing to watch out for: During the installation you will notice a window marked ‚ÄúSetup‚Äù. Make sure you tick the ‚ÄúAdd Python 3.x to PATH‚Äù checkbox and click on ‚ÄúInstall Now‚Äù, as shown below.\nIf you forget to tick above checkbox, the easiest way is to uninstall and re-install with the option ticked. If Microsoft Store opens up when you run ‚Äòpython‚Äô command in terminal, you can install python from the store directly. It will configure python environment for you.",
    "description": "We need Python before we can start. If you don‚Äôt have Python installed yet, start by installing Python. Ideally we would like you to install the latest version of Python, however if you already have an earlier version installed that should work too! At a minimum, this tutorial requires Python 3.5.\nCheck your version of Python We‚Äôre going to perform a simple experiment to check whether Python is already installed, and if it is, what version is installed.",
    "tags": [],
    "title": "Python installation",
    "uri": "/python/python/03_getting_python_on_your_machine/1_python_installation/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "She Codes One Day Workshop Tutorials (new)",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
